// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using calorieCounter_backend.Data;

#nullable disable

namespace calorieCounter_backend.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("calorieCounter")
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("calorieCounter_backend.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Carbohydrates")
                        .HasColumnType("real");

                    b.Property<float>("Energy")
                        .HasColumnType("real");

                    b.Property<float>("Fat")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerId")
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<float>("Protein")
                        .HasColumnType("real");

                    b.Property<float>("ValuesPer")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Product", "calorieCounter");
                });

            modelBuilder.Entity("calorieCounter_backend.Models.Recipe", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerId")
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Recipe", "calorieCounter");
                });

            modelBuilder.Entity("calorieCounter_backend.Models.RecipeProduct", b =>
                {
                    b.Property<string>("RecipeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("RecipeId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("RecipeProduct", "calorieCounter");
                });

            modelBuilder.Entity("calorieCounter_backend.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<float>("Carbohydrates")
                        .HasColumnType("real");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("Energy")
                        .HasColumnType("real");

                    b.Property<float>("Fat")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<float>("Protein")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("User", "calorieCounter");
                });

            modelBuilder.Entity("calorieCounter_backend.Models.UserEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntryType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MealType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEntry", "calorieCounter");
                });

            modelBuilder.Entity("calorieCounter_backend.Models.Product", b =>
                {
                    b.HasOne("calorieCounter_backend.Models.User", "Owner")
                        .WithMany("Products")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("calorieCounter_backend.Models.Recipe", b =>
                {
                    b.HasOne("calorieCounter_backend.Models.User", "Owner")
                        .WithMany("Recipes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("calorieCounter_backend.Models.RecipeProduct", b =>
                {
                    b.HasOne("calorieCounter_backend.Models.Product", "Product")
                        .WithMany("RecipeProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("calorieCounter_backend.Models.Recipe", "Recipe")
                        .WithMany("RecipeProducts")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("calorieCounter_backend.Models.UserEntry", b =>
                {
                    b.HasOne("calorieCounter_backend.Models.Product", "Product")
                        .WithMany("UserEntries")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("calorieCounter_backend.Models.Recipe", "Recipe")
                        .WithMany("UserEntries")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("calorieCounter_backend.Models.User", "User")
                        .WithMany("UserEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Recipe");

                    b.Navigation("User");
                });

            modelBuilder.Entity("calorieCounter_backend.Models.Product", b =>
                {
                    b.Navigation("RecipeProducts");

                    b.Navigation("UserEntries");
                });

            modelBuilder.Entity("calorieCounter_backend.Models.Recipe", b =>
                {
                    b.Navigation("RecipeProducts");

                    b.Navigation("UserEntries");
                });

            modelBuilder.Entity("calorieCounter_backend.Models.User", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("Recipes");

                    b.Navigation("UserEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
